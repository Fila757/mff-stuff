
Architektura autonomního agenta: percepce, mechanismus výběru akcí, paměť, psychologická inspirace
- není jedna konkrétní definice
- racionálně rozhodující se entita v prostředí, vnímaném skrze senzory
- alternativně musí být proaktivní (nejen reaktivní)

- abstraktní architektura agenta 
    - S: množina stavů
    - A: množina akcí 
    - agent: S* -> A 

    - typycky: see: S->p, action: P*->A

- výběr akcí: 
    - proaktivní: plánování dosažení cíle, ...
    - reaktivní: reakce na immedate změny v prostředí 
    - víc v metodách řízení 

- paměť: 
    - implicitní v případě reprezentace např. stavovým automatem (stav)
    - explicitní skrze nějaký knowledge base, různé reprezantace, záleží na použité ontologii, může být i generická 1st order logic-like 
    - reaktivní agent nemá paměť, proaktivní ji potřebuje (impl, nebo explicitní)

    - hard (pamatuju si tvrdá fakta) vs fuzzy (např. short term spoje neuronů) o online učených agentů (zvířata simulace) (~patterny)

- neuronové sítě: skrz maximalizaci ohodnocení (reinforcement learning) / napřímo vybírá akci 

- namísto tvrdých pravidel: fuzzy pravidla 
    - [0, 1] namísto true/false 
    - fuzzy rules: specifikují potřebnou míru -> projektují míru předpokladu do míry výsledku
    - fuzzy FSM: fuzzy pravidla, fuzzy přechody 

- psychologická inspirace Human-like artificial creatures: 
    - člověk: high level conscious kognice: plánování; low level lizard brain reflexy
    - fuzzy patern based paměť + explicitní na tvrdá akta 
    - assumption nějakého plánování, racionality, komunikace, ...

    - what to do: delibaration 
    - how to do it: means-ends reasoning 
    -> BDI architecture 

    - intentions: present directed / future-directed / policy based ...
        - adopted / commited desires 
        - musí být reevaluated občas 
        - drive means-end reasoning 
        - ovlivnují beliefs 

Metody pro řízení agentů; symbolické a konekcionistické reaktivní plánování, hybridní přístupy
- reaktivní vs. plánovací vs. hybridní (BDI, soar)
- čistě reaktivní agent: 
    - přechodová funkce S->A, závisí čistě na aktuálních vjemech
    - alternativně může mít agent stav (stavový automat), stav součástí stavu světa -> zanáší paměť

    - if/then pravidla 
    - hierarchický/fuzzy/... FSM (finite state machine)
    - do veké míry decision tree (static (only running), dynamic (reevaluate whole path to node))

    - v případě víc pravidel: 
        - evaluate and execute all relevant
        - podle statické priority
        - náhodné 
        - floating priority

    - SHRP: Simple hierarchical reactive planning
        - if-then rules, priorities 
        - může explicitně mít state příznaky, ale je to tedious a error prone 
        - Essentially a behaviour tree
        - Goals, subgoals, ...

        - dobré pro prioritizaci quick buheviours
        - bez paměti perceptual aliasing: stejná věc vypadá jinak (nemám explicitní stav)


- čisté plánování/deductive reasoning:
    - agent se stává efektivně dokazovačem -> 
        - hledá důkaz/cestu od výchozích podmínek, skrze odvozovací pravidla (akce~implikace) k cíli 
        - primárně zkoušet dokozatelné akce, sekundárně ty, které nejsou contradicting aktuálnímu stavu  

- praktický reasoning 
    - deliberace: čeho chceme dosáhnout 
    - means-end reasoning: jak toho chceme dosáhnout 

    - inference: DPLL (DFS s heuristikami), WalkSAT (random assignment, nahodne / maximalizace satisfied claus. flipuje in false clause)
    - FO logic: grounding (instanciace všech termů, může bý nekonečně), skolemizace (E: constant, V: all instances)

- plánování v FO 
    - akce jsou termy 
    - situace / state jsou termy 

    - preconds/post-effects 
    - forward search: apply actions until reach goal: randomly
    - backward search: apply only partially applied actions (lifting)
    - remember intermediate goals 


    - planspace planning:
        - start with empty plan, add actions to satisfy not yet covered goals
          - initial state is an action with no pre-requisites
          - goal is an action with no effects
        - partial plan
          - tuple: partially inited operators, set of constraines, set of causal relations, partial ordering
        - ordering (just order) and causal relation (actions has to be directly after each other)
        - flaws:
          - open goal: not yet satisfied precondition (binding variables, finding new operator, ...)
          - threat: action that can't be inbetween a causal relation

        - partial plan is solution if no flaws, ordering consistent, and instantiated

- hFSM:   
    - hierarchické finite state machines 
        - stav je transparentně trackován skrze state machine 
        - většinou nějaká ontransition activity, ... 
    - snadnější alternativy než u čistých if-then rules (SHRP), teoreticky ekvivalentně silné

    - různé varianty: 
        - pFSM: probabilistic, sFSM: sequential 

- scripting 
    - důraz na behavior oriented design 
    - decompose v top-down, implementuj bottom-up 

    - těžké udržovat sequence: problém s blocking actions, reevaluace, ...
    - snadné alternativy a paralelní akce (naopak těžké v FSM)

- behavior trees 
    - evaluace začne v root node, postupně pokračuje dál
    - každá node má vlastní paměť, running until done 

    - hFSM ekvivalence (potřeba řešit wrapping children nodes u alternativ z FSM->beh. trees)
    - passive vs. active:
        - active: alawys reevaluate whole path from root -> lze přerušit nejen leaf currently running node 
        - passive: running node je jediná aktivní 

    - still a tree -> not a graph -> limitation against FSM (nutná velká duplikace, ...)
    - can do parallel execution (seq. in the same frame workaround, znovu duplikace kódu oproti např. scriptingu)
    - can't do mixed rules evaluation properly
    - dobře zvládají looping

- decision space: 
    - FSM a scripting seems complimentary 
    - mix xFSM a if-then rules, které vybírají použítý FSM (select function vybírá / replacement, ...)


- POSH: Parallel ordered slip-stack hierarchy
    - http://www.cs.bath.ac.uk/~jjb/web/posh.html
    - goal: posh expression

    - Remembers what subtask the agent was currently pursuing
    - provides a way to encode when that subtask should be abandoned, or when a more important new goal or task should take over.

    - drive collection: root of the POSH hierarchy, on every POSH action-selection cycle reconsiders which goal the agent should be working on.  
        - how a BOD agent can respond rapidly to changes in the environment.
    - competences: these are basic reactive plans.  
        - allow a BOD agent to complete a task robustly and opportunistically.
    - action patterns: or simple sequences.  
        - a basic kind of plan aggregate which turn out to be useful in quite a lot of situations, despite their lack of flexibility.  
        - reduce the combinatorial complexity of the agent when a full competence is not really necessary. 

    - unless goal satisfied
        - goes through drives, executes the one with correct trigger & not exceeded freq
            - executes drive's stack
                - reset on success, failures, or timeouts, not on switch 
                - competence elements can't interrupt each other 
    - selects a goal, tries its stack of competences, each can contain set of action patterns

    - pros:
        - separation of decision making from behavior primitives similar to BTs / FSMs
        - rule prioritization 
        - action patterns modeled as sequence of actions 

    - cons: 
        - condition conj. of sensors only
        - hard to model durative actions (no running state), hard to do interactive unless blocking 
        - switching between branches on top-level only, drives cannot be referenced 
        - drive stack is passive, only top revisited every tick

- Goal: 
    - prolog with if-then rules 
    - actions have pre, poss conditions, post are automatically applied
    - event module executed every tick as the first
    - main has linear execution, only the first applicable executed (also, linearall, random, ... options)

    - pros:
        - unification makes us to code faster, prolog good for reasoning, rule prioritization
    - cons: 
        - hard to model durative actions - no action sequence, same as SHRP 

- BDI 
    - Beliefs: domělý stav světa
    - intentions: state of env. agent might want to to achieve 
    - desire: one of possible intention 

    - má intention stack aktuálních intentions, která se snaží zpracovat; přijímám subintentions delibareted plánů

    - options: (Deliberation) 2^B x 2^I -> 2^Des  // intentions & beliefs -> desires
    - filter: 2^B x 2^D x 2^I -> 2^I    // All I know -> less intentions
    - brf: (Belief refresh) 2^B x Per -> 2^B

    - generic planning loop
        - v = see(), B = brf(B, v), D = options(B, I), I = filter(B, D, I)
        - p = plan(B, I, Ac)
        - while not (empty(p) or success(I, B) or impossible (I, B)) 
            - a = hd(p), execute(a), p=[1:] //choose action and execute it
            - v = see(), B = brf(B, v)
            - if reconsider(I, B) then D=options(B, I), I = filter(B, D, I)
            - if not sound (p, I, B) then p = plan(B, I, Ac) // if curr plan doesn't work for reconsidered intention / changed beliefs ->   new plan

    - např. PRS (procedural reasoning system)
        - Database for beliefs about the world, represented using first order predicate calculus.
        - Goals to be realized by the system as conditions over an interval of time on internal and external state descriptions (desires).
        - Knowledge areas (KAs) or plans that define sequences of low-level actions toward achieving a goal in specific situations.
        - Intentions that include those KAs that have been selected for current and eventual execution.
        - Interpreter or inference mechanism that manages the system.

        - goals can have subgoals 
        - není plné plánování, pouze z databáze plánů 
        - stack of intentions: postupně přibívají sub-intentions 
        ~ DFS 

    - BDI interpreter: 
        - generate options based on events 
        - deliberate selected options, add them to current intentions 
        - execute intentions

- plánování 
    - plan většinou z databáze plánů
    - občas je třeba reconsider: open-minded (dokud se věří, že lze) vs. close-minded (dokud se nevěří, že nelze)
    - sort of exploration vs expotation (when to reconsider)

- STRIPS: 
    - svět jako first order logic 
    - akce jako preconditions a effects 
    - planning alg: nalezení nejkratší cesty mezi curr-state a goal 

- subsumpční architektura: 
    - http://gki.informatik.uni-freiburg.de/teaching/ws0809/map/mas_lect3.pdf
    - čistě reaktivní architektura 
    - agenti mají tělesnost, jsou vrstevnatí, žádná explicitní representace znalostí
    - inteligence vzniká emergentně, žádný explicitní reasoning/symbolická representace 
    
    - world -> perception -> (cognition) -> action 
        - podle Brookse kognice jenom in the eye of the observer 

    - rule-like structure, parallelní run několika behaviors
        - přímé mapování mezi stavem prostředí a akcemi 
    - subsumpční hierarchie pravidel dodává prioritu
        - všechny úrovně najednou 
        - vybere se aplikovatelné behavior s nejvyšší prioritou 

    - mars roover s radioactive crumbs + gradient signálu od mother-ship 
    - problémy
        - jednotlivé vrstvy nejsou tak nezávislé, začne být čím dál větší coupling 
        - těžko modelovat long-term rozhodnutí, ...

- Hybridní reasoning: 
    - high level planning, low level reakční architektura 
    - horizontální stacking: každá vrstva samostantně, těžko mít koherentní jednání 
    - vertikální: dolní vstvy poskytují vjemy nahoru, horní vstvy příkazy dolů

    - touring machines 
        - modelovací vrstva (cíle, konflikty, ...)
        - modelovací vrstva vytváří plán, proaktivní chování
        - reaktivní vrstva

- Symbolické a konekcionistické reaktivní plánování: 
    - SOAR: State operator, and result  
    - higher level procesy se dají rozložit do malých primitivních (a rychlých) operatorů nad daty
    - pouze jeden operátor at the same time (bottleneck), selection process je parallení
    - rekurzivní řešení subgoals, ... 

    - konekcionistické reaktivní plánování
        - zpětně-vazební učení, multiple lobes 
        - 128 perc -1:4-> 640 concept -128inh,128exc-> 16 decision
        - posilněné pozitivní, zeslabené negativní
        - když 0, tak se může přepojit 
        ~ fully connected NN se silnou regularizací

- reactive planning: 
    - v podstatě hledání cesty 
    - States, Actions, Actions(s), Result(s, a), Cost(s, a)

- klasické plánování: 
    - vyžaduje plně pozorovatelný svět, povětšinou statický 

Komunikace a znalosti v multiagentních systémech, ontologie, řečové akty, FIPA-ACL, protokoly
- komunikace znalostí
    - message passing, shared blackboard (úzké hrdlo, ...)

- styl komunikace / kódování: 
    - různé ontologie: systémy representace informací 
    - strukturované: classes, instances, properties, relations, ...
    
    - ontologie ontologií: 
        - dictionary: slovník termínů
        - gloassary: vysvětlení skrze NL
        - formální is-a hierarchie 
        - properties, value restrictions, ... 
        - arbitrární logické constrains 

- ontologické jazyky: 
    - formální declarativní jazyky pro representaci znalostí 
    - mohou obsahovat jak fakta, tak reasoning rules 
    - většinou first order logic / description logic 

    - xml: nebylo zamýšleno ale funguje (hierarchie, properties, ...)
    - RDF: jednoduchý, expresivní, representace vztahů přes triples (subject, predicate, object)
    - OWL(Web ontolgoy language)
        - mnoho verzí různé síly (od polynomiálně reasoning po arbitrary mostly undecidable)
    - KIF: First order logic 

- Description logics: 
    - knowledge base 
        - ABox: třídy, vztahy, ...
        - TBox: instance, vztahy instancí 

    - jazyk pro specifikaci ontologií, queries, ...
    - conpcepts (classes), roles (properties, predicates), individuals (objects)
    - extension propositional logic, ne tak strong jako FO, většinou rozhodnutelné

- Řečové akty
    - ovlivnění světa skrze řečový akt 
    - rozdíl mezi: co bylo řečeno, co bylo myšleno, jaký to mělo efekt 
    - mohou mít preconditions 

    - různé kategorie (např.:)
        - assertives: informace 
        - directives: requests
        - comissives: promise
        - ... 

    - performative word (definuje typ) + content 

    - mohou být vnímány jako akce -> lze skrze ně plánovat 
        - e.g. strips (pre/pos conditions)

- otevřený (co není explicitně true nevíme) vs uzavřený svět (co není explicitně true je false)
    - representace negativních znalostí, jako v logickém programování

- FIPA-ACL 
    - protocol FIPA (foundation for inteligent physical agents)
        - specifikuje zprávu (obálku) i jak je encoded obsah 

    - performative, content, receiver, language, ontology
    - performatives: achieve, advertise, ask-about, ask-all, forward, ...
    - parameters: content, force, reply-with, sender, receiver, ...

    - simpliifkace KQML semantics, implementace řečových aktů v JADE 
    - mnoho různých performatives 

- FIPA SL: content language
    - specifikuje obsah zpráv, syntax cca FO logic 

- Modální logika
    - https://www.martinpilat.com/en/multiagent-systems/modal-logics
    - extenze predikátové logiky: necessity, possibility 

    - set of possible Worlds, R: relation jestli je R(w, u) w accessible z u
        - pravdivost vždy vůči světu a světech dostupných

        - necessity: P je true ve všech možných acessible worlds 
        - possibility: p je true v některých accessible worlds

    - multimodalita, Ri i€[0...n]

    - epistemic modal logic 
        - relevantní pro MAS 
        - Více modalit Ki: agent i něco ví 
    - rozšíření o čas, ...


- Protokoly: 
    - https://www.martinpilat.com/en/multiagent-systems/communication-protocols

    - Request: 
        - Initiator posiela REQUEST performatív, Responder buď vykoná akciu alebo pošle AGREE, že to spraví, po dokončení pošle INFORM s výsledkom alebo DONE ak akciu vykoná bez výsledku
        - FIPA protocol (používá FIPA-ACP a FIPA SL)
    - Contract-Net: 
        - Initiator posiela CFP (Call for Proposal) viacerým agentom, oni odpovedajú PROPOSE s podmienkami alebo REFUSE, potom zas Initiator posiela ACCEPT_PROPOSAL alebo REJECT_PROPOSAL.
        - FIPA protocol (používá FIPA-ACP a FIPA SL)

    - CDPS - benevolencia 
        - všetci majú rovnaký cieľ. 
        - Dekompozícia problému -> Riešenie subproblémov -> Syntéza riešenia.
    - BlackBoard 
        - Arbiter prideľuje expertom úlohy -> vyvoláva ich k tabuli, Experti reagujú na ciele na tabuli,  Tabuľa je zdieľaná pamäť.
        - problemém formátu sdílených informací, shared datastructure (úzké hrdlo)
        - rewriting problems to subproblems, ... 
    - FELINE 
        - sdílení znalostí / subtasků
        - každý agent má rule-based systém: umím tohle dokázat/vyvrátit, chtěl bych tohle nechat dokázat/vyvrátit 
        - komunikace skrze zprávy: hypotézy+speech acts, ... 

Distribuované řešení problémů, kooperace, Nashova ekvilibria, Paretova efektivita, alokace zdrojů, aukce
- distribuované řešení viz protokoly nahoře
- kooperace: 
    - agenti nemusí být upřímní o svých capabilities, ...
    - maximalizace self vs common utility

- problém více agentů -> teorie her
    - čistá (jedna akce) vs smíšená strategie (expected return)
    - dominující strategie: lepší vůči všem možným variantám soupeře než ostatní mé strategie
    - Nash equilibrium s1 x s2: ani jeden agent si sám o sobě nepolepší když změní strategii, 
        - ne vždy existuje v pure strategies, vždy v mixed 
        - ~NP hard to find mixed 
    - pareto opt: neexistuje jiná strategie, kde bych si polepšil aniž bych si já pohoršil
        - front of pareto strategies 

    - prisoners dilema 
        - DD is nash eq 
        - DD je jedine non-pareto-optimal 
        - CC maximizes social wellfare 

- Voting 
    - condorcetov paradox
        - může se stát, že výsledek nebude optimalní pro většinu kandidátů
        - A>B>C, B>C>A, C>B>A, není ideální vítěz 

    - sekvenčně pluralitní: turnaj po dvojicích
    - bordov: každý dá pořadí, agregují se body podle ranku
    - slatov: optimalizační strategie nejmíň dvojic co jsou špatně: NP úplné
    - scotish smth: každej dá jeden bod nejlepšímu + pořadí, přenáší se na další když vypadne

    - arrow theorem: žádný volební systém založený na úplném pořadí nemůže z indiv. preferencí (úplné a transitiv) vytvořit uspořádání při:
        - neomezená doména: všechny možné užitky jsou brané v úvahu
        - ne-diktátorství: nevybere se jeden člověk, co to rozhodne
        - pareto-opt: nelze zvětšit užitek pro jednoho volícího bez snížení užitku ostatních
        - nezávislost irelevantnich alternativ: pořadí X, Y závisí jen na jejich ohodnocení
    

- Aukce: 
    - obálková metoda + nejvýšší (true-eps)
    - Vickry: obálka + cena 2. nejvyšší (true)
    - anglická: otevřená zvyšující (as long as <= true-eps)
    - holandská: snižuje (until <= true-eps)


Metodologie návrhu, jazyky a prostředí multiagentních systémů
- leccos dle Wooldridge knihy nalezené na internetu 

- motodologie
    - models + set of guidlines 
    - víceméně dvě skupiny
        - OOP inspired (např. Gaia)
        - knowledge engineering inspired (např. DESIRE) 

- architektury viz výše 
- jazyky:
    - DARPA: KQML: knowledge query and manipulation language (obálka), KIF: reprezentace znalostí (obsah)
    - FIPA ACL: Implementované v JADE, ...
    - Jade (JAVA), task execution, communication (p2p, yellow pages)

- JADE: https://drive.google.com/drive/folders/1r5ROOEOkSCGFsl8Qt7-AmTPS6mDkbcBr
    - JAVA environment 
    - ~actor model 

    - message passing, ontologie, yellow pages, ... 
    - agent má několik behaviours, náhodně jdou po sobě, agent single threaded (nesmí sám sebe blokovat)
    - behaviours posílají a zpracovávají messages 
        - komunikační protokoly viz výše: Request, contract net 
        - zprávy mají performative (na základě nich lze např. filtrovat)
        - multiplatfromní obsah zpráv na základě definvoané ontologie (jinak lze i prostě serializované java objects, ale...)
            - action (request akce), predicate (otázka), concept (other)


- agentspeak: https://drive.google.com/drive/folders/1r5ROOEOkSCGFsl8Qt7-AmTPS6mDkbcBr
    - prolog like
    - zejména BDI architektura 

    - beliefs & rules on beliefs
    - plans: 
        - trigger: predikáty, říkající jestli by plán měl začít po přidání/ubrání konkrétních beliefs 
        - context: podmínka jestli může začít
        - body: akce, které by měl agent vykonat

    - possible to have separate custom agent architecture e.g. in Java that maintains its own representation of env. etc. 
        - custom actions, custom event selection, custom beliefs, ...

- intentional stance
    - physical stance: understand the complete laws of the system
    - design stance: understand reasons why and how it works, what's the purpose, not the underlying physical laws (teleological expl.)
    - intentional stance: use intentional system view for prediction
        - physical design / descr. might not be available / practical
        - can be very simple, though sometimes too simplifying
        - Is there intenionality by itself or it only an interpretation?

- role: 
    - permissions & resource access: záleží jestli kooperující / selfish 
    - responsibility 
- interactions: 
    - relations and dependencies between roles 
    - typy komunikačních protokolů (hetero/homogenní prostředí)
- organization rules: 
    - constrains on roles and protocols 
    - liveness: roli může agent dostat jen za nějakých podmínek, ...
    - safety: stejně jako v počítačové bezpečnosti 
    
- AAI Metodologie
    - internal models: interní chování jednotlivých agentů 
        - odpovídá PRS architektuře
    - external models: system level view, angenti a jejich vztahy 
        - agent class vs instance model 
        - agenti mají BDI atributy 

    - summary 
        - identifikuj role, aplikační doménu, vytvoř hierarchii 
        - responsibilites jednotlivých rolí, cíle, ...
        - pro každý goal vytvoř plán(y)
        - information requirements, ...

- Gaia Metodologie
    - https://drive.google.com/drive/folders/1r5ROOEOkSCGFsl8Qt7-AmTPS6mDkbcBr
    - https://www.cs.ox.ac.uk/people/michael.wooldridge/pubs/jaamas2000b.pdf
    - Metodologie jak přistoupit k návrhu MAS systému "a methodology for agent-oriented analysis and design"
        - concurrent, distributed, always on, interact in dynamic environment

    - Inspirováno object oriented design
    - skrze organizational design 

    - abstractions
        - individual level: beliefs, goals, plans, sense/reason, reactive/proactive
        - multi-agent level: roles, norms, speech-acts, env (closed/open, ...)

    - org abstractions
        - env: identify entities and resources 
        - roles and interactions: functionalities, activities, responsibilities, ...
        - org rules: constrains on rules, relationships between roles, ...
        - org structures and patterns: topology, control regime (efficienty, robustness, ...)

    - analysis
        - suborganizations: requirements, subgoals, interakce, nutne skilly 
        - enviroment model: abstraktní resources, vztahy mezi zdroji, dynamics prostředí 
        - preliminary role model: identifikace basic skills (permissions, responsibilities)
        - preliminatory interaction model: vztahy a závislosti mezi rolemi, interakce jako abstraktní protokoly (kdo, initiator, partneři, output, ...)
        - organization rules: constrains na rolích a protokolech (liveness, safety)
    - design 
        - architectural design: organizační struktura, role a interakce 
        - detailed design: agent model a service model 
